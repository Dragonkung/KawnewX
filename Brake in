
 local ScreenGui = Instance.new("ScreenGui")
local Toggle = Instance.new("TextButton")

ScreenGui.Name = "ScreenGui"
ScreenGui.Parent = game.CoreGui

Toggle.Name = "Toggle"
Toggle.Parent = ScreenGui
Toggle.Text = "Ui"
Toggle.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
Toggle.Position = UDim2.new(0.120833337, 0, 0.0952890813, 0)
Toggle.Size = UDim2.new(0, 50, 0, 50)
Toggle.Font = Enum.Font.Code
Toggle.TextColor3 = Color3.fromRGB(255, 0, 0)
Toggle.TextScaled = true

Toggle.MouseButton1Down:connect(function()
    -- Use correct key code for Left Control
    local Keycode = Enum.KeyCode.LeftControl

    -- Correctly send press and release events with VirtualInputManager
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Keycode, false, game)
    game:GetService("VirtualInputManager"):SendKeyEvent(false, Keycode, false, game)
end)



local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Kawnew X - Breakin 1 ",
    SubTitle = "& Fluxus",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.End -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    g = Window:AddTab({ Title = "Credit", Icon = "" }),
    Main = Window:AddTab({ Title = "Food", Icon = "" }),
    m = Window:AddTab({ Title = "Role", Icon = "" }),
    t = Window:AddTab({ Title = "Teleport", Icon = "" }),
    k = Window:AddTab({ Title = "Misc", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "Welcom",
        SubContent = "SubContent", -- Optional
        Duration = 5 
    })



    Tabs.g:AddParagraph({
        Title = "Kawnew | Brakin 1 ",
        Content = "I created it for bladball only but it super op!"
    })



    Tabs.Main:AddButton({
        Title = "Get Chips",
        Description = "Chips",
        Callback = function()
            game.ReplicatedStorage.RemoteEvents.GiveTool:FireServer("Chips")
        end
    })
    
    Tabs.Main:AddButton({
        Title = "Get Cola",
        Description = "Cola",
        Callback = function()
            game.ReplicatedStorage.RemoteEvents.GiveTool:FireServer("BloxyCola")
        end
    })
    
    Tabs.Main:AddButton({
        Title = "Get Apple",
        Description = "Apple ",
        Callback = function()
            game.ReplicatedStorage.RemoteEvents.GiveTool:FireServer("Apple")
        end
    }) 
    
    Tabs.Main:AddButton({
        Title = "Get Pizza",
        Description = "Peezaa",
        Callback = function()
            game.ReplicatedStorage.RemoteEvents.GiveTool:FireServer("Pizza2")
        end
    })
    
    Tabs.Main:AddButton({
        Title = "Get Cookie",
        Description = "Cookede",
        Callback = function()
            game.ReplicatedStorage.RemoteEvents.GiveTool:FireServer("Cookie")
        end
    })
    
    Tabs.Main:AddButton({
        Title = "Get Medkit",
        Description = "",
        Callback = function()
            game.ReplicatedStorage.RemoteEvents.GiveTool:FireServer("MedKit")
        end
    })
    
   
--Role
Tabs.m:AddButton({
        Title = "Get Police",
        Description = "Gun Tatatata",
        Callback = function()
            local A_1 = "Gun"
local A_2 = true
local Event = game:GetService("ReplicatedStorage").RemoteEvents.OutsideRole
Event:FireServer(A_1, A_2)
        end
    })
    
   Tabs.m:AddButton({
        Title = "Get Swant",
        Description = "Pew Pew",
        Callback = function()
            local A_1 = "SwatGun"
local A_2 = true
local Event = game:GetService("ReplicatedStorage").RemoteEvents.OutsideRole
Event:FireServer(A_1, A_2)
        end
    })
    
    
    --Tp

    Tabs.t:AddButton({
        Title = "House",
        Description = "Go go go",
        Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-36, 3, -200)
        end
    })
    
    Tabs.t:AddButton({
        Title = "Basement",
        Description = "",
        Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(71, -15, -163)
        end
    })
    
    Tabs.t:AddButton({
        Title = "Attic",
        Description = "",
        Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-16, 35, -220)
        end
    })
    
    Tabs.t:AddButton({
        Title = "Store",
        Description = "",
        Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-422, 3, -121)
        end
    })
    
    Tabs.t:AddButton({
        Title = "Swere",
        Description = "",
        Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(129, 3, -125)
        end
    })
    
    Tabs.t:AddButton({
        Title = "Boss Room",
        Description = "",
        Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-39, -287, -1480)
        end
    })
    
    
    --misc
    
    Tabs.k:AddButton({
        Title = "Get Bat",
        Description = "",
        Callback = function()
            game.ReplicatedStorage.RemoteEvents.GiveTool:FireServer("Bat")
        end
    })
    
    Tabs.k:AddButton({
        Title = "Get Teddy",
        Description = "",
        Callback = function()
            game.ReplicatedStorage.RemoteEvents.GiveTool:FireServer("TeddyBloxpin")
        end
    })
    
    Tabs.k:AddButton({
        Title = "Get Sword",
        Description = "",
        Callback = function()
            game.ReplicatedStorage.RemoteEvents.GiveTool:FireServer("LinkedSword")
        end
    })
    
    
    
    
    
    
    
    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
